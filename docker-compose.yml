# Claude Flow Docker Compose - Multi-Environment Configuration
# Supports development, testing, and production deployments

services:
  # ===========================
  # Claude Flow Main Application
  # ===========================
  claude-flow:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
      cache_from:
        - claude-flow:latest
        - claude-flow:cache
    image: claude-flow:latest
    container_name: claude-flow
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      # GITHUB_TOKEN should have minimal required permissions.
      # It is recommended to use a token with only the necessary scopes for this application.
      # For improved security, consider using Docker secrets or a secret management tool.
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - CLAUDE_FLOW_HOME=/home/claude/.claude-flow
      - MCP_SERVER_URL=http://mcp-server:3001
      - DATABASE_URL=sqlite:///app/data/claude-flow.db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - claude-flow-data:/home/claude/.claude-flow
      - claude-flow-logs:/app/logs
      - ./workspace:/app/workspace:rw
      - ./data:/app/data:rw
    networks:
      - claude-flow-network
    ports:
      - "${CLAUDE_FLOW_PORT:-3000}:3000"
    depends_on:
      - redis
      - mcp-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.claude-flow.rule=Host(`localhost`)"
      - "traefik.http.services.claude-flow.loadbalancer.server.port=3000"

  # ===========================
  # MCP Server for Claude Integration
  # ===========================
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: claude-flow:latest
    container_name: claude-flow-mcp
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MCP_MODE=server
      - MCP_PORT=3001
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - mcp-data:/home/claude/.mcp
      - claude-flow-logs:/app/logs
    networks:
      - claude-flow-network
    ports:
      - "${MCP_PORT:-3001}:3001"
    command: ["node", "cli.js", "mcp", "start", "--port", "3001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # ===========================
  # Redis for Caching and Session Management
  # ===========================
  redis:
    image: redis:7-alpine
    container_name: claude-flow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    networks:
      - claude-flow-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================
  # Load Balancer (Production)
  # ===========================
  nginx:
    image: nginx:alpine
    container_name: claude-flow-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - claude-flow
    networks:
      - claude-flow-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================
  # Development Environment
  # ===========================
  claude-flow-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: claude-flow:dev
    container_name: claude-flow-dev
    environment:
      - NODE_ENV=development
      - DEBUG=claude-flow:*
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
    volumes:
      - .:/app:rw
      - /app/node_modules
      - claude-flow-dev-data:/home/claude/.claude-flow
    networks:
      - claude-flow-network
    ports:
      - "${DEV_PORT:-3000}:3000"
      - "${DEV_MCP_PORT:-3001}:3001"
      - "${DEV_DEBUG_PORT:-9229}:9229"
    profiles:
      - development
    stdin_open: true
    tty: true

  # ===========================
  # Testing Environment
  # ===========================
  claude-flow-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    image: claude-flow:test
    container_name: claude-flow-test
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - .:/app:rw
      - /app/node_modules
      - test-results:/app/test-results
      - test-coverage:/app/coverage
    networks:
      - claude-flow-network
    profiles:
      - testing
    command: ["npm", "run", "test:ci"]

  # ===========================
  # Ruv-Swarm Integration
  # ===========================
  ruv-swarm:
    image: node:20-alpine
    container_name: claude-flow-ruv-swarm
    working_dir: /app
    environment:
      - NODE_ENV=production
      - SWARM_MODE=distributed
      - CLAUDE_FLOW_URL=http://claude-flow:3000
      - MCP_SERVER_URL=http://mcp-server:3001
    volumes:
      - ./ruv-swarm:/app:ro
      - swarm-data:/data
      - swarm-logs:/app/logs
    networks:
      - claude-flow-network
    command: ["sh", "-c", "npm install && npx ruv-swarm mcp start"]
    depends_on:
      - claude-flow
      - mcp-server
    restart: unless-stopped
    profiles:
      - production
      - swarm

  # ===========================
  # Monitoring Stack (Optional)
  # ===========================
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-flow-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - claude-flow-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: claude-flow-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - claude-flow-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

# ===========================
# Named Volumes
# ===========================
volumes:
  claude-flow-data:
    driver: local
  claude-flow-logs:
    driver: local
  claude-flow-dev-data:
    driver: local
  mcp-data:
    driver: local
  redis-data:
    driver: local
  swarm-data:
    driver: local
  swarm-logs:
    driver: local
  test-results:
    driver: local
  test-coverage:
    driver: local
  nginx-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ===========================
# Networks
# ===========================
networks:
  claude-flow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ===========================
# Profiles Usage:
# - Default: claude-flow, mcp-server, redis
# - Development: docker-compose --profile development up
# - Testing: docker-compose --profile testing up
# - Production: docker-compose --profile production up
# - Monitoring: docker-compose --profile monitoring up
# - Full Stack: docker-compose --profile production --profile monitoring up
# ===========================